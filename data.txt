=====Google Colab NVIDIA Tesla K80 (Grid Sampling)=====
     In Circle  Average Distance  Total Points  Side Interval   Blocks  Threads
0       7839.0          0.904553       10000.0         1000.0     40.0    256.0
1      31411.0          0.905345       40000.0         2000.0    157.0    256.0
2      70675.0          0.905346       90000.0         3000.0    352.0    256.0
3     125623.0          0.905268      160000.0         4000.0    625.0    256.0
4     196315.0          0.905335      250000.0         5000.0    977.0    256.0
5     282691.0          0.905331      360000.0         6000.0   1407.0    256.0
6     384759.0          0.905314      490000.0         7000.0   1915.0    256.0
7     502619.0          0.905383      640000.0         8000.0   2500.0    256.0
8     636115.0          0.905374      810000.0         9000.0   3165.0    256.0
9     785343.0          0.905383     1000000.0        10000.0   3907.0    256.0
10    950251.0          0.905376     1210000.0        11000.0   4727.0    256.0
11   1130907.0          0.905388     1440000.0        12000.0   5625.0    256.0
12   1327295.0          0.905405     1690000.0        13000.0   6602.0    256.0
13   1539291.0          0.905389     1960000.0        14000.0   7657.0    256.0
14   1767115.0          0.905407     2250000.0        15000.0   8790.0    256.0
15   2010567.0          0.905403     2560000.0        16000.0  10000.0    256.0
16   2269740.0          0.905403     2890000.0        17000.0  11290.0    256.0
17   2544563.0          0.905392     3240000.0        18000.0  12657.0    256.0
18   2835247.0          0.905408     3610000.0        19000.0  14102.0    256.0
19   3141543.0          0.905408     4000000.0        20000.0  15625.0    256.0
20   3463491.0          0.905400     4410000.0        21000.0  17227.0    256.0
21   3801255.0          0.905406     4840000.0        22000.0  18907.0    256.0
22   4154695.0          0.905408     5290000.0        23000.0  20665.0    256.0
23   4523787.0          0.905404     5760000.0        24000.0  22500.0    256.0
24   4908583.0          0.905400     6250000.0        25000.0  24415.0    256.0
25   5309159.0          0.905403     6760000.0        26000.0  26407.0    256.0
26   5725483.0          0.905409     7290000.0        27000.0  28477.0    256.0
27   6157471.0          0.905411     7840000.0        28000.0  30625.0    256.0
28   6605165.0          0.905412     8410000.0        29000.0  32852.0    256.0
29   7068563.0          0.905413     9000000.0        30000.0  35157.0    256.0
30   7547539.0          0.905407     9610000.0        31000.0  37540.0    256.0
31   8042343.0          0.905407    10240000.0        32000.0  40000.0    256.0
32   8552923.0          0.905411    10890000.0        33000.0  42540.0    256.0
33   9079144.0          0.905412    11560000.0        34000.0  45157.0    256.0
34   9620991.0          0.905408    12250000.0        35000.0  47852.0    256.0
35  10178539.0          0.905405    12960000.0        36000.0  50625.0    256.0


=====Intel i7 8550U Vanilla Python (Monte Carlo)=====
    In Circle  Average Distance  Less Than 1       Time
0        42.0           0.82242      0.63832    0.00750
1        78.0           0.90010      0.56575    0.01971
2       156.0           0.90092      0.58752    0.06242
3       400.0           0.89858      0.58555    0.37264
4       816.0           0.88385      0.60397    1.72450
5      1573.0           0.90548      0.58570    5.85811
6      2373.0           0.89932      0.59255   13.63285
7      3915.0           0.90752      0.58398   40.81342
8      7893.0           0.91044      0.58180  150.64175
9     11753.0           0.90875      0.58339  321.76805
10    15736.0           0.90582      0.58594  652.27925
11    19724.0           0.90294      0.58862  914.47200


=====Intel i7 8550U Numba (Monte Carlo)=====
    In Circle  Average Distance  Less Than 1       Time
0     70632.0           0.90611      0.58581    8.85951
1     78522.0           0.90514      0.58662   10.43311
2     86388.0           0.90499      0.58689   12.83376
3     94377.0           0.90570      0.58607   14.99955
4    102126.0           0.90555      0.58634   17.37429
5    109882.0           0.90572      0.58624   21.64931
6    117800.0           0.90518      0.58668   26.34827
7    125715.0           0.90582      0.58598   31.41730
8    125724.0           0.90494      0.58697   32.50106
9    125753.0           0.90532      0.58665   33.62751
10   125697.0           0.90507      0.58695   27.92590
11   125696.0           0.90517      0.58680   27.84965
12   126002.0           0.90553      0.58615    7.53308 <-- multisampling removed
13   133506.0           0.90686      0.58478    7.97813
14   141663.0           0.90510      0.58671    9.06667
15   149244.0           0.90584      0.58593   10.01692
16   157164.0           0.90500      0.58704   11.09501
17   165163.0           0.90543      0.58647   11.78497
18   196267.0           0.90419      0.58768   16.78739
19   235716.0           0.90576      0.58608   26.21658
20   314242.0           0.90534      0.58638   54.07331
21   392670.0           0.90545      0.58650   95.89512
22   471586.0           0.90565      0.58624  124.46372
23   550142.0           0.90550      0.58652  170.12948


=====Intel i7 8550U Numba (Monte Carlo w/ PCG64)=====
785281 points - Average dist: 0.9050175  |  Less than 1: 0.5868657  |  344.02133s <- PCG64


=====Intel i7 8550U Numba (Grid Sampling)=====
    In Circle  Average Distance  Less Than 1        Time
0      7668.0          0.903670     0.588256     1.79552
1     31064.0          0.904853     0.587138     2.18134
2     70168.0          0.905109     0.586985     3.98360
3    124980.0          0.905211     0.586811     9.71896
4    195496.0          0.905255     0.586604    22.85839
5    281760.0          0.905348     0.586568    47.68851
6    383692.0          0.905351     0.586596    93.25219
7    501304.0          0.905329     0.586568   129.29596
8    783764.0          0.905378     0.586533   306.60807
9    948532.0          0.905380     0.586542   485.74881
10  1128984.0          0.905373     0.586547   654.62164
11  1325204.0          0.905388     0.586535  1021.08148
12  1537092.0          0.905388     0.586535  1331.01414
13  1764688.0          0.905389     0.586530  1760.79574


=====Apple M1 8-Core GPU (Taichi + Apple Metal Backend) (Grid Sampling)=====
    In Circle  Average Distance  Less Than 1       Time
0      7668.0          0.903669     0.588256    0.11977
1     31064.0          0.904856     0.587137    0.13135
2     70168.0          0.905111     0.586985    0.13049
3    124980.0          0.905211     0.586811    0.20692
4    195496.0          0.905254     0.586603    0.52106
5    281760.0          0.905348     0.586568    0.93380
6    383692.0          0.905352     0.586595    1.47207
7    501304.0          0.905330     0.586569    2.33469
8    634680.0          0.905358     0.586587    3.67772
9    783764.0          0.905379     0.586532    5.49377
10   948532.0          0.905378     0.586540    8.08600
11  1128984.0          0.905366     0.586547   11.35173
12  1325204.0          0.905381     0.586534   15.61973
13  1537092.0          0.905384     0.586537   20.97954
14  1764688.0          0.905373     0.586528   27.72107
15  2008036.0          0.905401     0.586521   35.94513
16  2267060.0          0.905384     0.586529   46.33749
17  2541760.0          0.905362     0.586522   57.12980
18  2832148.0          0.905334     0.586521   73.28088
19  3138388.0          0.905439     0.586510   90.93845
20  3460296.0          0.905301     0.586506  110.97844
21  3797716.0          0.905390     0.586521  133.24946
22  4150980.0          0.905866     0.586524  161.65900
23  4520056.0          0.905556     0.586516  192.40412
24  4904784.0          0.904679     0.586501  226.95143 <-- fp error?
25  5305132.0          0.904460     0.586509  265.81815


colab processing code
side_len = []
threads = []
blocks = []
in_circle = []
total_points = []
avg_dist = []

for x in e:
  a,b,c = [int(y) for y in x[0].split(' ') if y.isdigit()]
  side_len.append(c*1000)
  threads.append(a)
  blocks.append(b)
  a, b = [int(y) for y in x[1].split(' ') if y.isdigit()]
  in_circle.append(a)
  total_points.append(b)
  avg_dist.append(float(x[3]))

other code
in_circle = []
avg_dist = []
time = []
less_than = []

for x in res:
  split = x.lstrip().split(' ')
  a = int(split[0])
  b = float(split[5])
  c = float(split[12])
  d = float(x.split(' ')[-1][:-1])
  in_circle.append(a)
  avg_dist.append(b)
  less_than.append(c)
  time.append(d)
table = df.append([in_circle, avg_dist, less_than, time]).T
table.columns = ["In Circle", "Average Distance", "Less Than 1", "Time"]

other
in_circle = []
avg_dist = []
time = []
less_than = []

for x in res:
  split = x.lstrip().split(' ')
  a = int(split[0])
  b = float(split[5])
  c = float(split[12])
  d = float(split[-1][:-1])
  in_circle.append(a)
  avg_dist.append(b)
  less_than.append(c)
  time.append(d)
